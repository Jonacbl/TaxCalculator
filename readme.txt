Lab01-PersonalTax

姓名：陈柏林
学号：22336029
邮箱：chenblin23@mail2.sysu.edu.cn


收获体会：

本次实验的主要内容是基于 Java 语言实现一个个人所得税计算系统，并通过分层设计、遵循 Java 语言规范以及文档化注释的方式，提高代码的可读性和可维护性。

1. 分层设计
在实验过程中，我采用了分层设计的思想，将系统拆分为多个模块，包括 Main、Menu、TaxInterface 和 TaxTable 类。这样的设计方式使得代码结构清晰，各模块职责分明。例如，Main 负责程序的启动，Menu 负责交互，TaxInterface 负责向菜单提供接口，TaxTable 负责存储、计算和修改税率信息。这种设计不仅增强了代码的可读性，同时也提高了扩展性，未来如果需要修改税率计算逻辑，只需调整 TaxInterface 或 TaxTable，而不会影响整个系统。

2. Java 语言规范
在编写代码时，我严格遵循 Java 语言规范，包括命名规范、代码格式以及异常处理。例如：

采用驼峰命名法（camelCase）来命名变量和方法，如 readTaxRate()。

使用 Pascal 命名法（PascalCase）命名类，如 TaxInterface、TaxTable。

适当使用空行和缩进，使代码更加清晰易读。

在方法参数和返回值方面，尽量使用合适的数据类型，如 double 处理税率，int 处理税级。

在可能出现异常的地方添加 try-catch 语句，确保程序的健壮性。

3. 文档化注释
在代码编写过程中，我充分利用了 Javadoc 格式的文档注释，对重要的类和方法进行详细说明。
通过这种方式，能够让使用该方法的开发者快速理解其功能，而无需阅读具体实现代码。


通过本次实验，我深刻体会到了分层设计的重要性。良好的架构设计不仅使代码清晰易懂，还能降低后期维护的成本。同时，我也认识到了编写高质量代码需要遵循良好的编程规范，例如命名规则、代码格式、异常处理等。此外，编写文档化注释能够提高代码的可读性，方便团队协作。

本次实验让我受益匪浅，在未来的开发工作中，我将继续运用这些经验，不断优化代码质量。